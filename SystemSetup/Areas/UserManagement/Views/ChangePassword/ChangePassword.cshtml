@using SystemSetup.Models;
@using SystemSetup.Constants.Resources
@using System.Configuration
@model ChangePasswordModel

@{
    ViewBag.Title = "ChangePassword";
    Layout = "~/Views/Shared/_LayoutOutLogin.cshtml";
}

<script type="text/javascript">
    $(document).ready(function () {
        // Handle disable history back on browser
        window.location.hash = "view";
        window.location.hash = "ChromeView"; //again because google chrome don't insert first hash into history
        window.onhashchange = function () { window.location.hash = "view"; }
    });
</script>

<div class="ChangePassword">
    @using (Html.BeginForm())
    {
        if (ViewBag.ChangePasswordSuccess != null)
        {
            <script type="text/javascript">
                $(function () {
                    iseiQ.utility.showMessageModal("Your password is changed successful !!!", false, function () {
                        window.location.href = '@Url.Action("Logout", "Login", new { area = "UserManagement" })';
                    });
                });
            </script>
        }
        else
        {
            <div class="box box-primary">
                <div class="box-header">
                    <h1>CHANGE PASSWORD</h1>
                    <div class="title" id="title"></div>
                    @Html.ValidationSummary(false)
                </div><!-- /.box-header -->
                <div class="box-body set-new-pass">
                    <div class="form-group">
                        @Html.HiddenFor(m => m.COMPANY_CD, new { @class = "product-input" })
                        @Html.HiddenFor(m => m.SETUP_USER_ACCOUNT, new { @class = "product-input" })
                        <div class="form-group">
                            <label class="bold">NEW PASS<span class="requiredField">*</span></label>
                            @Html.PasswordFor(m => m.NEW_PASSWORD)
                            <span id="passstrength"></span>
                        </div>
                        <div class="form-group">
                            <label class="bold">NEW PASS（RETYPE）<span class="requiredField">*</span></label>
                            @Html.PasswordFor(m => m.NEW_PASSWORD_REPEAT)
                            <span id="repassstrength"></span>
                        </div>
                        <div class="form-group note">
                            ※ Password setting conditions are required to be at least 6 letters long, small, large, alphanumeric
                            <br />
                            However, in the case of numbers that are estimated as word combinations or years, 12 or more letters are required.
                            <br />
                            （Sample） giangdeptrai@1102 → OK iseiq1234 → NG
                        </div>
                        <div class="form-group  margin-left-6">
                            @Html.AntiForgeryToken()
                            <button type="button" id="btnReturn" name="Return" class="button return" onclick='window.location = "@Url.Action("Login", "Login", new { area = "UserManagement" })";'><i class="btn-icon btn-back"></i>Back</button>
                            <button type="submit" id="btnSubmit" class="button green transmission"><i class="btn-icon btn-key"></i>Change Password</button>
                        </div>

                    </div>
                </div><!-- /.box-body -->
            </div>
        }
    }
</div>

<script type="text/javascript">
    $(function () {
        var regX = Constant.REGEX_PASSWORD;
        $("#NEW_PASSWORD").on("change keyup", function (e) {
            var text = $(this).val();
            if (regX.test(text)) {
                text = text.replace(regX, '');
                $(this).val(text);
            }
            // Get score of password
            var result = zxcvbn($('#NEW_PASSWORD').val());
            if (result.score < Constant.STRENGTH_INPUT_PASS) {
                $('#passstrength').html('NG');               
                $('#passstrength').css('color','red');
            }
            else {
                $('#passstrength').html('OK');               
                $('#passstrength').css('color','green');
            }

        });

        $("#NEW_PASSWORD_REPEAT").on("change keyup", function (e) {
            var text = $(this).val();
            if (regX.test(text)) {
                text = text.replace(regX, '');
                $(this).val(text);
            }
            // Get score of repassword
            var resultRepassword = zxcvbn($('#NEW_PASSWORD_REPEAT').val());
            if (resultRepassword.score < Constant.STRENGTH_INPUT_PASS) {
                $('#repassstrength').html('NG');               
                $('#repassstrength').css('color','red');
            }
            else {
                $('#repassstrength').html('OK');                
                $('#repassstrength').css('color','green');
            }


        });
        $(document).off('#btnSubmit');
        $(document).on('click', '#btnSubmit', function () {
            $('.validation-summary-errors').remove();
            var invalidMess = validateData();
            console.log(invalidMess);
            if (invalidMess.length > 0) {
                iseiQ.utility.showClientError(invalidMess);
                return false;
            }
            return true;
        });

        function validateData() {
            var invalidMess = [];

            var password = $('#NEW_PASSWORD').val();
            var repassword = $('#NEW_PASSWORD_REPEAT').val();
            var result = zxcvbn(password);
            var resultRepassword = zxcvbn(repassword);

            if (password.length === 0) {
                invalidMess.push("@string.Format(Messages.Required, @ChangePassword.NewPassword)");
            }
            else {
                if (password.length < Constant.MIN_INPUT_PASS || password.length > Constant.MAX_INPUT_PASS) {
                    invalidMess.push("@string.Format(Messages.PasswordLength)");
                }
                if (!iseiQ.utility.validAccount(password)) {
                    invalidMess.push("@string.Format(Messages.PasswordInvalidCharacter)");
                }
                if (result.score < Constant.STRENGTH_INPUT_PASS) {
                    invalidMess.push('@string.Format(Messages.PasswordStrength)');
                }
            }

            if (repassword.length === 0) {
                invalidMess.push("@string.Format(Messages.Required, @ChangePassword.NewPasswordConfirm)");
            }
            else {
                if (repassword.length < Constant.MIN_INPUT_PASS || repassword.length > Constant.MAX_INPUT_PASS) {
                    invalidMess.push("@string.Format(Messages.RePasswordLength)");
                }

                if (!iseiQ.utility.validAccount(repassword)) {
                    invalidMess.push("@string.Format(Messages.RePasswordInvalidCharacter)");
                }
                if (resultRepassword.score < Constant.STRENGTH_INPUT_PASS) {
                    invalidMess.push('@string.Format(Messages.PasswordStrength)');
                }
            }

            if (invalidMess.length == 0) {
                if (password !== repassword) {
                    invalidMess.push("@string.Format(Messages.PasswordNotMatch)");
                }
                else if (isSamePassword(password)) {
                    invalidMess.push("@string.Format(Messages.PasswordNotChanged)");
                }
            }
            return invalidMess;
        }
    });

</script>